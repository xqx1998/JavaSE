1、面向对象-继承
    概念：属于面向对象的三大特征之一。是一种子父类关系的描述。子类可以拥有父类的成员变量和成员方法就是继承。
    语法格式：
        public class zi extends fu{

        }
    什么时候使用继承？想一想今天的 老师和学生、猫和狗的案例为什么要使用继承来实现？
        如果多个类有相同的成员变量和成员方法，那么就可以提取一个公共的父类，让这些类继承父类即可。
    注意事项：
        1、一个类可以有多个子类，但是不能有多个父类。
        2、Java中的继承不能多继承，但是可以多层继承。

2、继承中成员变量、成员方法、构造方法的访问特点
    成员变量访问特点：就近原则
            如果方法中有局部变量，那么优先访问局部变量。如果当前类没有这个同名的局部变量，那访问该类中的成员变量。如果该类中没有同名的成员变量，
        就访问父类的该变量。也可以使用this.变量名访问当前类的成员变量，使用super.变量名访问父类的成员变量。

        sout(age);//就近原则找age变量。
        sout(this.age);//访问本类的成员变量age
        sout(super.age);//访问父类的成员变量age

    构造方法访问特点：
        1、创建子类对象默认会创建父类对象，执行父类的空参构造。创建父类对象的目的就是为了初始化父类中的成员变量，因为子类中可能会使用到父类的成员
        变量。
        2、在子类构造方法中，可以使用super(参数值...)来指定访问父类的哪个构造方法。

        注意事项：super(参数值...)必须是构造方法中的第一行代码。

        例如：
        public Cat(String name, int age,String color) {
            super(name, age);//执行父类的有参构造
            this.color=color;//color变量是cat类特有的成员变量，单独赋值。
        }

    成员方法访问特点：
        在子类方法中可以使用 super.方法名() 来访问父类的某个方法
        @Override
        public void show() {
            super.show();//调用父类的show方法。
        }

    this和super的区别？
        this表示当前类的对象，super表示当前类父类的对象。

3、方法的重写
    方法重载：在一个类中，方法名相同，参数列表不同(参数个数不同，同位置参数类型不同)就是方法重载。
    方法重写：在子父类关系中，子类中定义的方法和父类方法一样(方法名相同，参数列表也相同)就是方法重写，也叫方法覆盖。
        快捷方式：
            1、直接输入要重写的方法名就会出提示，然后按回车。
            2、alt+insert/ins 选择override method...
        小提示；
            重写的方法上面可以使用@Override注解来检查该方法是不是重写的方法，这个注解不是必须要加的，可以不加。

    方法重写的注意事项：
        重写的方法的访问权限修饰符不低于父类该方法的访问权限修饰符，一般一样即可。

4、package、import、final、static关键字（和继承的关系不大）
    package和import区别？
        package表示当前类所在的包，import表示引入其他类所在的包。都是在类名上面使用。
    final：最终的
        final修饰变量：final修饰的变量是常量
        final修饰类：final修饰类不能被继承
        final修饰成员方法：final修饰成员方法不能被重写。
    static：静态的
        1、static修饰的内容是被所有对象共享的，不属于某一个对象。访问静态的成员变量和成员方法只需要使用类名就可以访问。
            Student.school="传智大学";
            Student.show();
        2、static访问特点：
            静态方法中只能直接访问静态成员变量和成员方法。非静态内容要想访问，只能通过创建对象，使用对象来调用。例如：
             Student s=new Student();
             s.age=20;
             s.method1();