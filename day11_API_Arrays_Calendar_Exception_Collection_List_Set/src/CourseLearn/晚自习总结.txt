1、多态
    1 多态的体现形式：父类引用指向子类对象(重点*****)
        父类 对象名=new 子类();
    2 多态的好处和弊端
      好处：一般在定义方法形参的时候使用父类类型，那么将来在调用方法的时候可以传递任意子类对象。提高了代码的复用性和灵活性。
      弊端：使用多态只能调用子类重写父类的方法，无法调用子类特有的方法。
    3 强制类型转换
        注意：在强制类型转换之前一定要判断是否是这个类型,否则可能会出现类型转换异常(ClassCastException)
        子类类型 对象名=(子类类型)对象；
        public class AnimalOperator {
              public void useAnimal(Animal a) { //Animal a=new Cat(); Animal a=new Dog()
                  a.eat();
                  //需求：如果这个动物是猫，那么调用猫的特有方法playGame()
                  //难点：如何判断a是Cat类型，只有当变量a是Cat类型才可以将a强转成Cat。
                  if(a instanceof Cat){
                      Cat c= (Cat) a;
                      c.playGame();
                  }
              }
          }
2、抽象类
    1 为什么使用抽象类：（理解）
        如果一个类中的某个方法必须要所有子类重写，并且该父类中的这个方法不需要具体实现，那么就需要将这个方法定义成抽象方法，这个父类就是抽象类
    2 语法格式：（重点*****）
        public abstract class 类名{
            public abstract void eat();
        }
    3 抽象类的特征：(了解)
        1 抽象方法必须在抽象类中，抽象类中可以有抽象方法也可以有非抽象方法
        2 抽象类不能直接创建对象，必须使用多态的形式创建子类对象。
        3 抽象类的子类要么是抽象类，要么重写所有抽象方法。
    4 成员的访问特点：(了解)
        1、抽象类中可以有成员变量、常量、静态成员变量
        2、抽象类可以有构造方法，创建子类对象的时候会执行父类构造方法，用于初始化父类成员变量。但是不能直接new抽象类。
        3、抽象类可以有抽象的成员方法也可以有非抽象的成员方法。

    说明：一般在开发中，同一类事物具有相同的属性或者成员方法才会抽取父类，抽取到父类中的成员方法如果不需要具体实现，就可以定义成抽象类和抽象方法。

3、接口（重要*****在开发中很常用）
    1 为什么使用接口：（理解）
        规定某些类具有相同的功能就会使用接口来定义这些额外功能。换一句话说：接口就是用来规定某些类具有某些行为的。
    2 语法格式：（重点*****）
        public interface 接口名{

        }
        public class 实现类 implements 接口{
            //重写所有抽象方法
        }
        多态的形式创建实现类对象。
    3 成员的访问特点：(记住)
        成员变量：接口中的成员变量都是常量。默认省略了public static final；  例如：int num=100;
        构造方法：不能定义构造方法
        成员方法：在jdk1.7及以前版本接口中只有抽象方法，但是在1.7版本之后可以有default和static修饰的非抽象方法
    4 类与接口的关系：(记住)
        类与类：继承关系，类与类只能单继承，但是可以多层继承   public class 类名 extends 父类{}   常见
        类与接口：实现关系，类可以实现多个接口  public class 类名 implements 接口1,接口2,...{}  常见
        接口与接口：继承关系：一个接口可以继承多个接口  public interface 接口名 extends 接口1,接口2,...{}   很少

        Java中是允许多继承，但是只能是接口和接口之间多继承